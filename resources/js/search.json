[[{"l":"Getting started"},{"l":"Install the package","p":["First, open a terminal at the root of the application and install the following package:"]},{"l":"Write console logs","p":["A logger can output log entries with different levels ( debug, information, warning, error, critical). This allows to filter logs according to a minimum severity:","In the previous example, the logger instance would process only error and critical entries ☝️"]},{"l":"Basic text logs","p":["The simplest form is logging plain text directly at the desired level:"]},{"l":"Complex logs","p":["Segments can be chained to build richer log entries that include text, errors and objects:"]},{"l":"Styled logs","p":["When using a logger that supports styling, individual text segments can be styled:","If styling is not supported by the logger, the text is logged without any styling.","When styling is applied to any text segment, all error or object segments are appended at the end of the log entry."]},{"l":"Create a logging scope","p":["Scopes group related log entries under a shared label or context. This is useful for tracing operations, request or correlating events:"]},{"l":"LogRocket session replays","p":["By default, LogRocket session replays exclude console output. To send log entries to LogRocket, use the LogRocketLogger class from the @workleap/logrocket:"]},{"l":"Compose loggers","p":["You can forward the same log entry to multiple destinations by composing loggers:","In the previous example, Application started! will be processed by both logger instances ☝️"]},{"l":"Filter log entries","p":["A minimum severity of entries to process can be configured as an option. Messages with a lower severity than the configured level will then be ignored.","For reference, here's a description of each level:"]},{"l":"Debug","p":["Very detailed, often verbose, logs used mainly during development.","Example: API request/response bodies, lifecycle hooks, variable state."]},{"l":"Information","p":["General events that show the normal flow of the application.","Example: User login, component mounted, scheduled task started."]},{"l":"Warning","p":["Non-critical issues that might need attention but don’t break functionality.","Example: Deprecated API usage, retries after a failed network call."]},{"l":"Error","p":["Failures that prevent part of the system from working as intended.","Example: Unhandled exceptions, failed database query, API call failed with 500."]},{"l":"Critical","p":["Severe errors that cause the application to stop functioning or risk data integrity.","Example: Application crash, loss of critical service connection."]}],[{"l":"Reference","p":["BrowserConsoleLogger","CompositeLogger","RootLogger","LoggerScope","createCompositeLogger"]}],[{"l":"BrowserConsoleLogger","p":["A logger outputting messages to a browser console."]},{"l":"Reference"},{"l":"Parameters","p":["options: An optional object literal of options:","logLevel: Sets the minimum severity of entries the logger will process. Possible values are debug, information, warning, error, critical."]},{"l":"Methods","p":["Refer to the RootLogger and LoggerScope documentation.","When styling is applied to any text segment, all error or object segments are appended at the end of the log entry. If no styling is applied, the original sequencing is preserved."]},{"l":"Usage"},{"l":"Log a debug entry"},{"l":"Log an information entry"},{"l":"Log a warning entry"},{"l":"Log an error entry"},{"l":"Log a critical entry"},{"l":"Filter log entries","p":["A minimum severity of entries to process can be configured as an option. Messages with a lower severity than the configured level will then be ignored."]},{"l":"Build complex log entry","p":["Multiple segments can be chained to create a log entry that combines styled text, errors, and objects. To process all segments and output the log to the console, complete the chain by calling any log method."]},{"l":"Style a log entry"},{"l":"Use a logging scope"},{"l":"Dismiss a logging scope","p":["A scope can be dismissed to prevent it's log entries from being outputted to the console."]},{"l":"Style the scope label at creation","p":["A scope label can be styled when the scope is created."]},{"l":"Style the scope label at end","p":["A scope label can be styled when the scope it's ended. This is particularly useful to style the label accordingly to the status of an operation or request."]}],[{"l":"CompositeLogger","p":["A logger implementation that delegates log entries to multiple underlying loggers. It implements the standard RootLogger and LoggerScope interfaces so it can be used anywhere a single logger is expected, but internally it forwards each chained segment-building and logging calls to underlying loggers."]},{"l":"Reference"},{"l":"Parameters","p":["loggers: An array of Logger instances."]},{"l":"Methods","p":["Refer to the RootLogger and LoggerScope documentation."]},{"l":"Usage"},{"l":"Log a debug entry"},{"l":"Log an information entry"},{"l":"Log a warning entry"},{"l":"Log an error entry"},{"l":"Log a critical entry"},{"l":"Filter log entries","p":["Minimum severity entries to process is configured on an invidual logger basis."]},{"l":"Build complex log entry","p":["Multiple segments can be chained to create a log entry that combines styled text, errors, and objects. To process all segments and output the log to the console, complete the chain by calling any log method."]},{"l":"Style a log entry","p":["Not all loggers support styled log entries. When the underlying loggers do support styling, those styles will be passed forwared to them."]},{"l":"Use a logging scope"},{"l":"Dismiss a logging scope","p":["A scope can be dismissed to prevent it's log entries from being outputted to the console."]},{"l":"Style the scope label at creation","p":["A scope label can be styled when the scope is created."]},{"l":"Style the scope label at end","p":["A scope label can be styled when the scope it's ended. This is particularly useful to style the label accordingly to the status of an operation or request."]}],[{"l":"RootLogger","p":["Defines the interface for logger implementations."]},{"l":"Reference"},{"l":"Methods","p":["withText(text, options?): Adds a text segment to the log entry.","withError(error): Adds an Error object to the log entry.","withObject(obj): Adds an arbitrary object to the log entry.","debug(log?, options?): Output a log entry at the debug level. Typically used for low-level diagnostic information.","information(log?, options?): Output a log entry at the information level. Typically used for general information.","warning(log?, options?): Output a log entry at the warning level. Typically indicates a potential problem or unexpected state.","error(log?, options?): Output a log entry at the error level. Typically used for failures and issues.","critical(log?, options?): Output a log entry at the critical level. Typically indicates severe errors or conditions requiring immediate attention.","startScope(label, options?): Begins a logging scope with a label to group related log entries. For additional information refer to the LoggerScope documentation."]},{"l":"Usage"}],[{"l":"LoggerScope","p":["Defines the interface for logger scope implementations.","A scope is a temporary, named logging context that groups related log entries together. A scope is typically created to trace the execution of a specific operation, request, or correlating events. All logs outputted through the scope are grouped under its label, making it easier to visually group messages. Scopes can include multiple log levels and chained segments."]},{"l":"Reference"},{"l":"Methods","p":["withText(text, options?): Adds a text segment to the log entry.","withError(error): Adds an Error object to the log entry.","withObject(obj): Adds an arbitrary object to the log entry.","debug(log?, options?): Output a log entry at the debug level. Typically used for low-level diagnostic information.","information(log?, options?): Output a log entry at the information level. Typically used for general information.","warning(log?, options?): Output a log entry at the warning level. Typically indicates a potential problem or unexpected state.","error(log?, options?): Output a log entry at the error level. Typically used for failures and issues.","critical(log?, options?): Output a log entry at the critical level. Typically indicates severe errors or conditions requiring immediate attention.","end(options?): Ends the scope, outputting the log entries if the scope is not dismissed."]},{"l":"Usage"}],[{"l":"createCompositeLogger","p":["A factory function to create a CompositeLogger instance from Workleap libraries standard logging API."]},{"l":"Reference"},{"l":"Parameters","p":["verbose: Indicates whether or not debug information should be logged. If no loggers are provided, the CompositeLogger instance will be created with a ConsoleLogger instance by default.","loggers: Loggers to create the CompositeLogger with."]},{"l":"Returns","p":["A CompositeLogger instance."]},{"l":"Usage"}],[{"l":"About","p":["To ask a question or propose an idea, feel free to start a new discussion on Github. If you found a bug, please open an issue on Github."]},{"l":"Contributing","p":["Have a look at the contributor's documentation."]},{"l":"License","p":["See the LICENSE on Github."]}],[{"l":"Samples","p":["Web sample"]}]]